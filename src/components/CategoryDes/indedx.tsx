import React, {FC, ReactElement} from 'react';

const CategoryDes: FC<{type: string}>= (props) => {
  let content: ReactElement = <></>;
  if(props.type === '106'){
    content = (
      <>
        <p>兴来每独往，胜事空自知。</p>
        <p>行到水穷处，坐看云起时。</p>
        <p>记录自己生活中一些好玩的事情，顺便闲的时候吐槽一下！</p>
      </>
    )
  }else if(props.type === '201'){
    content = (
      <>
        <p>现代绚烂华丽的网站离不开一代代 html/css 的更替，而作为前端家族的"牌面"，这也是所有前端开发者的第一站，需要闯过的第一关；网站的自定义UI的基础实现就好比建设一幢大楼的骨架一样，需要去精心的设计和雕琢，从这里就要开始体现前端和其他语言的不同的奇妙之处；千里之行，始于足下，从这一关开启前端开发者的道路一定是必要的，前端家庭欢迎你的到来！</p>
      </>
    )
  }else if(props.type === '202'){
    content = (
      <>
        <p>欢迎来到前端的第二关，JavaScript！作为前端家族的核心，这是你必须要修炼的内功，它将取决未来你在前端开发者中的档次，通俗地讲就是决定你的薪资档位。既然是内功，肯定是没那么容易修炼的，不过没关系，语言都是想通的，学着学着就会发现它那无穷的魅力时刻在吸引着你，对你来说摸索出它的规律，搞清楚它的本质，拒绝那诱惑的外表和行为，那么，你在前端也就一通百通了！</p>
      </>
    )
  }else if(props.type === '203'){
    content = (
      <>
        <p>作为新一代网页的标准Html5，使前端开发也不再是单纯的网页开发者；它在浏览器中为前端提供了丰富的API接口，通过JavaScript去驱动他们，进一步的为网站赋予不可思议的交互能力。同时，当下是移动互联网的天下,掌握移动web开发才能成为完整的前端工程师；在Html5的世界里，只可尽情的发挥你的想象力，就能得出很多意想不到的效果。</p>
      </>
    )
  }else if(props.type === '204'){
    content = (
      <>
        <p>从Html/css到JavaScript再到Html5,这些可以被统称为从刀耕火种的时代；虽然它们能帮助我们完成开发，但是在前端日益增加的需求场景下，它们已经满足不了现代的开发需求了。所以框架就出现了，帮助开发者快速实现工程化，大大的促进了生产力的提升，使前端迈进了工程化时代，而React.js由此诞生。作为由Facebook内部使用并开源到现在成为全世界最流行的前端UI库，也是所有前端开发者必须去了解和学习的；React的设计思想、理念、原理、解决的问题等都一系列的阐述一定会为你打开前端的另一扇大门。</p>
      </>
    )
  }else if(props.type === '207'){
    content = (
      <>
        <p>在现有的传统的纯原生开发中，由于某些原因（如动态化内容需求增大、开发成本），已经不能满足日益增长的业务需求。而针对这些问题，由前端和原生技术去驱动，诞生了一些跨平台的动态化框架，如React Native就是其中之一。它是一个基于 JavaScript 构建的框架，用于编写业务代码，并为可在 Android 和 iOS 上运行的移动应用程序带来类似 native 的效果。RN 集成了 JavaScript 和 React.JS 的优势，并为开发人员提供了以 Objective-C，Swift 或 Java 语言编写模块的功能。</p>
      </>
    )
  }else if(props.type === '208'){
    content = (
      <>
        <p>作为中国的前端开发者，你不去了解和使用Vue吗？支持国产，从我做起。和React的设计理念不同，但是解决的问题都是一致的；Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件，非常容易学习，也非常容易与其它库或已有项目整合。另一方面，在与相关工具和支持库一起使用时，Vue.js 也能完美地驱动复杂的单页应用。</p>
      </>
    )
  }else if(props.type === '209'){
    content = (
      <>
        <p>想摆脱 Java 用前端代码写服务吗？想成为前端全栈吗？Node.js的诞生使这种情况成为了可能，进一步提升前端的无限可能性，使得前端为自己的职业生涯有了更多的路可以选择。你之前不了解服务端没关系，可以以Node作为翘板入门；之前了解服务端更好，这将使你更快速的了解掌握Node。</p>
      </>
    )
  }else if(props.type === '104'){
    content = (
      <>
        <p>记录一下自己工作生活中常用的一些软件及工具。</p>
      </>
    )
  }else if(props.type === '105'){
    content = (
      <>
        <p>记录一下自己的一些心路历程和平时的一些突发感想。</p>
      </>
    )
  }
  return (
    <>
      {content}
    </>
  )
};

export default CategoryDes;
